-*- Org -*-

Copyright 2010, 2011, 2012  Ludovic Court√®s <ludo@gnu.org>

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

* Packaging
** Write more documentation.

* Storage
** Rename `chop-store-convert' to `chop-store-copy'; add `--sync'

The `--sync' option would wrap the target store in a smart block store.
This way, you could run:

  $ chop-backup /backup/home $HOME
  $ chop-store-copy --sync /backup/home /somewhere/bak/home
  $ chop-store-copy --sync /backup/home /elsewhere/foo/home


** Provide a store using the GNUnet's DHT or Panada?

See http://savannah.nongnu.org/p/panada .

[[https://gnunet.org/developer-handbook-dht][GNUnet's DHT]] is interesting for many reasons, but the showstopper for
backup is this:

  Content in the DHT typically expires after one day, so DHT PUT
  operations should be repeated every 1-2 hours.

** Implement a DBus-based block store?

Though it may not be that useful...

** Experiment with simple erasure codes, like B-Codes.  Not sure this belong
   to libchop though.

Could try with [[http://www.ka9q.net/code/fec/][FEC]] (LGPL).

See also [[http://itpp.sourceforge.net/current/reedsolomon.html][IT++]].

** Add support for Camellia, Serpent, etc.
** Add a GPGME encryption/decryption filter
** Borrow ideas from Git's packs?

http://repo.or.cz/w/git.git?a=blob;f=Documentation/technical/pack-format.txt

** Use OpenMP tasks in `chop_tree_index_blocks'

... to allow several blocks to be indexed in parallel, though the
store_write would probably have to be in a critical section.

** See [[http://search.cpan.org/~bradfitz/Brackup/lib/Brackup/Chunker/MP3.pm][Brackup::Chunker::MP3]] for chopper ideas
** Steal other relevant ideas from [[http://search.cpan.org/~bradfitz/Brackup/][Brackup]]  :-)
** Write a `tar' chopper

Breaks at tar header and file boundaries.  Stacked on top of an
arbitrary chopper for file contents.

*** Implement sub-streams so that the tar chopper can pass
    file contents to the sub-chopper

chop_error_t chop_sub_stream_open (chop_stream_t *source,
                                   chop_proxy_semantics_t,
				   size_t count,
				   chop_stream_t *substream);

** Add a [[http://www.1978th.net/tokyocabinet/][Tokyo Cabinet]] store back-end


** Use [[http://hssl.cs.jhu.edu/~neal/woodchuck][Woodchuck]] to schedule block store replication

* User interface
** Add an option to specify the format of OpenPGP keys (archiver/block-server)
** chop-block-server: Add an option like `--restrict' but with OpenPGP fingerprints
** Return a meaningful error code in DB_WRITE_BLOCK_METHOD et al.
