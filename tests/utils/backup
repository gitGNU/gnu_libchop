#!/bin/sh
# aside from this initial boilerplate, this is actually -*- scheme -*- code

# This test assumes `TESTS_ENVIRONMENT' set up Guile's search path
# correctly.

exec ${GUILE:-guile} -L "$top_builddir/utils" \
  -l "$0" -c "(apply $main (cdr (command-line)))" "$@"
!#
;;; Copyright (C) 2012  Ludovic Courtès <ludo@gnu.org>
;;;
;;; Libchop is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; Libchop is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with libchop.  If not, see <http://www.gnu.org/licenses/>.

(setenv "XDG_CACHE_HOME"
        (string-append (getcwd) "/backup-cache"))

(define-module (backup-test)
  #:use-module (chop-backup)
  #:use-module (chop tests)
  #:use-module (ice-9 ftw)
  #:use-module (ice-9 regex)
  #:use-module (srfi srfi-26)
  #:use-module (srfi srfi-34)
  #:use-module (srfi srfi-35)
  #:use-module (srfi srfi-64))

;; Some tests check error messages.
(setlocale LC_ALL "C")

(define (temporary-file-name)
  (let ((dir (or (getenv "builddir") (getcwd))))
    (format #f "backup-test-~x-~x" (getpid) (car (gettimeofday)))))

(define %top-srcdir
  (or (getenv "top_srcdir")
      (error "please define $top_srcdir")))

(define %test-dir
  (temporary-file-name))

(mkdir %test-dir)

(define %include-dir
  (string-append %top-srcdir "/include"))




(test-begin "run-storage-pipeline-recursive")

(test-assert "unchanged dir ⇒ same tuple"
  (with-temporary-store
   (lambda (store)
     (let ((t1 (run-storage-pipeline/recursive (const %default-storage-pipeline)
                                               %include-dir
                                               store))
           (t2 (run-storage-pipeline/recursive (const %default-storage-pipeline)
                                               %include-dir
                                               store))
           (t3 (run-storage-pipeline/recursive (lambda (file stat)
                                                 %default-storage-pipeline)
                                               %include-dir
                                               store)))
       (and (pair? t1) (equal? t1 t2) (equal? t2 t3))))))

(test-assert "EACCES on file"
  (with-temporary-store
   (lambda (store)
     (with-file-tree %test-dir (directory "root"
                                          (("a") ("b") ("c" #o000)))
       (guard (c ((pipeline-storage-error? c)
                  (and (eq? (pipeline-error-pipeline c)
                            %default-storage-pipeline)
                       (string=? "c"
                                 (basename (pipeline-storage-error-input c)))
                       (= EACCES (pipeline-error-libchop-error c)))))
         (run-storage-pipeline/recursive (const %default-storage-pipeline)
                                         (string-append %test-dir "/root")
                                         store)

         ;; Never reached.
         #f)))))

(test-assert "EACCES on sub-directory"
  (with-temporary-store
   (lambda (store)
     (with-file-tree %test-dir (directory "root"
                                          (("a") ("b")
                                           (directory "subdir" #o000
                                                      (("c") ("d")))))
       (let ((port (open-output-string)))
         (with-error-to-port port
           (lambda ()
             (run-storage-pipeline/recursive (const %default-storage-pipeline)
                                             (string-append %test-dir "/root")
                                             store)))

         (string-match "subdir.*ignored" (get-output-string port)))))))

(test-end)


(gc) ;; stress the GC

(rmdir %test-dir)

;; rm -rf $XDG_CACHE_HOME
(file-system-fold (lambda (dir stat result) #t)   ; enter?
                  (lambda (file stat result)      ; leaf
                    (delete-file file))
                  (lambda (dir stat result)       ; down
                    result)
                  (lambda (dir stat result)       ; up
                    (rmdir dir))
                  (lambda (dir stat result)       ; skip
                    result)
                  (lambda (dir stat errno result) ; error
                    #f)
                  #t
                  (getenv "XDG_CACHE_HOME"))

(exit (= (test-runner-fail-count (test-runner-current)) 0))

;;; Local Variables:
;;; eval: (put 'test-assert 'scheme-indent-function 1)
;;; End:
